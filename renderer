#!/usr/bin/env bash


show_help() {
	printf "
$(f_heading "renderer" | f_fg_yellow)

reads the formatted output of a program, and writes it to a file.

before the actual write, the output is passed through some transformers that \
strip-down and dress-up the text, e.g. get rid of redundant blank lines, or \
append an auto-generated message to the end of the file.

if you don't want to use the transformers, you can just skip the renderer and \
redirect your program's output directly to a file, after setting the desired format. for example:

$(f_code_block \
"sh" \
'env FORMAT=markdown ./my-command -h > ./usage/my-command.md')


$(f_subheading "usage")

$(f_code_block \
"sh" \
'( export FORMAT=<format> OUTPUT_PATH=<output_path> ; <my-command> | ./styli.sh/renderer )')

$(f_code_block \
"sh" \
'./renderer -h')


$(f_subheading "flags")

$(f_code_definition \
"-h" \
"shows this help message.")


$(f_subheading "environment")

environment variables for the renderer must be declared using $(f_code 'export') \
(rather than $(f_code 'env')), in order to share them both with the renderer and the formatter in your program.

$(f_code_definition \
"FORMAT" \
"which format to use. possible values: $(f_code 'markdown'), $(f_code 'terminal'), $(f_code 'raw').")

$(f_code_definition \
"OUTPUT_PATH" \
"where to write to. value should be a full path, including file name and extension.")


$(f_subheading "examples")

assuming $(f_code './foo') is a program that $(f_code 'source')s the $(f_italic 'styli.sh') \
formatter, and its output is formatted when using the $(f_code '-h') flag:

$(f_list_item \
"render a markdown file" \
"$(f_code_block \
"sh" \
'( export FORMAT="markdown" OUTPUT_PATH='./usage/foo.md' ; ./foo -h | ./styli.sh/renderer )')

writes the markdown-formatted output of $(f_code './foo -h') to $(f_code './usage/foo.md')")

"
	exit 0
}


init_renderer() {
	require_var "FORMAT"
	require_var "OUTPUT_PATH"
	
	echo
	echo "> > > start rendering"

	echo "> format: '$FORMAT'"
	echo "> output path: '$OUTPUT_PATH'"
	
	echo "> ensuring output directory..."
	local output_dir="$( dirname "$OUTPUT_PATH" )"
	ensure_dir "$output_dir"
	echo "> directory ensured: '$output_dir'"
	
	echo "> redirecting all input to the output path"
	# test if this script is executed (i.e. not sourced)
	if [[ $BASH_SOURCE = $0 ]]; then
		echo "$(cat -)" | strip_down | dress_up > ${OUTPUT_PATH}
	else
		exec 1> ${OUTPUT_PATH} > >( strip_down | dress_up )
	fi
}

require_var() {
    if [[ -z "${!1}" ]]; then
        echo "$1 is mandatory!"
        exit 1
    fi
}

ensure_dir() {
	if [[ ! -d $1 ]]; then
		mkdir -p "$1"
	fi
}

dress_up() {
    add_message | eof
}

strip_down() {
	case $FORMAT in
		markdown)
			squeeze_blanks
			;;
		*)
			printf "$(cat -)"
			;;
	esac
}

add_message() {
	local repo_url="https://github.com/eliranmal/styli.sh"
	case $FORMAT in
		markdown)
			printf "%s\n\n\n\n%s\n%s\n%s" "$(cat -)" '<br/><br/>' '---' \
			'<sup><i>created with <b><a href="'"$repo_url"'">styli.sh</a></b></i></sup>'
			;;
		raw)
			printf "%s\n\n\n\n\n%s\n%s" "$(cat -)" '---' 'created with styli.sh ('"$repo_url"')'
			;;
		*)
			printf "$(cat -)"
			;;
	esac
}

eof() {
	case $FORMAT in
		markdown)
			echo "$(cat -)" # add newline at end of file
			;;
		*)
			printf "$(cat -)"
			;;
	esac
}

squeeze_blanks() {
	cat -s
}


main() {

	# test if this script is executed (i.e. not sourced)
	if [[ $BASH_SOURCE = $0 ]]; then
		if [[ $1 = "-h" ]]; then
			local source_dir="$( cd "$(dirname "${BASH_SOURCE}")" ; pwd -P )"
			source "$source_dir"/formatter
			show_help
		fi
		init_renderer
	fi
}

main "$@"
